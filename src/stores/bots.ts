import { defineStore } from 'pinia'
import { ref } from 'vue'
import type { Bot, BotForm, Question } from '../types/bot'

export const useBotsStore = defineStore('bots', () => {
  const bots = ref<Bot[]>([])
  const currentBot = ref<Bot | null>(null)
  const loading = ref(false)
  const error = ref<string | null>(null)

  // Demo bots data
  const demoBots: Bot[] = [
    {
      id: 'bot1',
      name: 'Frontend Developer Bot',
      description: '–ë–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ frontend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤',
      telegram_token: '123456789:ABCdefGHIjklMNOpqrSTUvwxyz',
      telegram_group_id: '-1001234567890',
      welcome_message: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã\n\n–ú—ã –∏—â–µ–º —Ç–∞–ª–∞–Ω—Ç–ª–∏–≤–æ–≥–æ Frontend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤.',
      welcome_media: 'https://images.pexels.com/photos/3861958/pexels-photo-3861958.jpeg',
      welcome_media_type: 'image',
      closing_message: '‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –∑–∞—è–≤–∫—É!\n\n–ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à–µ —Ä–µ–∑—é–º–µ –∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.',
      is_active: true,
      questions: [
        {
          id: 'q1',
          text: '–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è.',
          type: 'text',
          required: true,
          order: 1
        },
        {
          id: 'q2',
          text: '–°–∫–æ–ª—å–∫–æ –ª–µ—Ç —É –≤–∞—Å –æ–ø—ã—Ç–∞ –≤ frontend —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ?',
          type: 'button_choice',
          required: true,
          options: ['–ú–µ–Ω–µ–µ 1 –≥–æ–¥–∞', '1-2 –≥–æ–¥–∞', '3-5 –ª–µ—Ç', '–ë–æ–ª–µ–µ 5 –ª–µ—Ç'],
          order: 2
        },
        {
          id: 'q3',
          text: '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ –¥–ª—è —Ä–µ–∑—é–º–µ',
          type: 'image',
          required: true,
          order: 3,
          validation_message: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'
        },
        {
          id: 'q4',
          text: '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (1-2 –º–∏–Ω—É—Ç—ã)',
          type: 'voice',
          required: true,
          order: 4,
          validation_message: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'
        }
      ],
      created_at: '2024-01-10T10:00:00Z',
      updated_at: '2024-01-15T14:30:00Z',
      stats: {
        total_applications: 45,
        completed_applications: 38,
        pending_applications: 12,
        conversion_rate: 84.4
      }
    },
    {
      id: 'bot2',
      name: 'Backend Developer Bot',
      description: '–ë–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ backend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤',
      telegram_token: '987654321:ZYXwvuTSRqpONMlkjIHgfeDCba',
      telegram_group_id: '-1001234567891',
      welcome_message: '–ü—Ä–∏–≤–µ—Ç! üöÄ\n\n–ú—ã –∏—â–µ–º –æ–ø—ã—Ç–Ω–æ–≥–æ Backend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞. –ì–æ—Ç–æ–≤—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤?',
      closing_message: 'üéâ –û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.\n\n–ù–∞—à HR-–º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 2-3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π.',
      is_active: true,
      questions: [
        {
          id: 'q1',
          text: '–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞',
          type: 'text',
          required: true,
          order: 1
        },
        {
          id: 'q2',
          text: '–ö–∞–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ?',
          type: 'button_choice',
          required: true,
          options: ['Python/Django', 'Node.js', 'Java/Spring', 'PHP/Laravel', 'Go', '–î—Ä—É–≥–æ–µ'],
          order: 2
        },
        {
          id: 'q3',
          text: '–ó–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ –æ —Å–≤–æ–µ–º –æ–ø—ã—Ç–µ (–¥–æ 1 –º–∏–Ω—É—Ç—ã)',
          type: 'video',
          required: false,
          order: 3,
          validation_message: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ'
        }
      ],
      created_at: '2024-01-12T15:20:00Z',
      updated_at: '2024-01-16T09:15:00Z',
      stats: {
        total_applications: 28,
        completed_applications: 22,
        pending_applications: 8,
        conversion_rate: 78.6
      }
    },
    {
      id: 'bot3',
      name: 'Marketing Manager Bot',
      description: '–ë–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤',
      telegram_token: '456789123:QWErtyUIOPasDFghjKLzxcVBnm',
      telegram_group_id: '-1001234567892',
      welcome_message: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É –∫–æ–º–∞–Ω–¥—É! üìà\n\n–ú—ã –∏—â–µ–º –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–≥–æ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.',
      closing_message: '‚ú® –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏!\n\n–ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à—É –∫–∞–Ω–¥–∏–¥–∞—Ç—É—Ä—É.',
      is_active: false,
      questions: [
        {
          id: 'q1',
          text: '–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?',
          type: 'text',
          required: true,
          order: 1
        },
        {
          id: 'q2',
          text: '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–µ',
          type: 'button_choice',
          required: true,
          options: ['–ù–µ—Ç –æ–ø—ã—Ç–∞', '1-3 –≥–æ–¥–∞', '3-5 –ª–µ—Ç', '–ë–æ–ª–µ–µ 5 –ª–µ—Ç'],
          order: 2
        }
      ],
      created_at: '2024-01-08T12:00:00Z',
      updated_at: '2024-01-14T16:45:00Z',
      stats: {
        total_applications: 15,
        completed_applications: 12,
        pending_applications: 5,
        conversion_rate: 80.0
      }
    }
  ]

  const fetchBots = async () => {
    loading.value = true
    error.value = null

    try {
      // Simulate API delay
      await new Promise(resolve => setTimeout(resolve, 500))
      bots.value = [...demoBots]
    } catch (err: any) {
      error.value = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–æ–≤'
    } finally {
      loading.value = false
    }
  }

  const fetchBot = async (id: string) => {
    loading.value = true
    error.value = null

    try {
      // Simulate API delay
      await new Promise(resolve => setTimeout(resolve, 300))
      const bot = demoBots.find(b => b.id === id)
      if (bot) {
        currentBot.value = { ...bot }
        return bot
      } else {
        error.value = '–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
        return null
      }
    } catch (err: any) {
      error.value = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–∞'
      return null
    } finally {
      loading.value = false
    }
  }

  const createBot = async (botData: BotForm) => {
    loading.value = true
    error.value = null

    try {
      // Simulate API delay
      await new Promise(resolve => setTimeout(resolve, 1000))
      
      const newBot: Bot = {
        id: 'bot' + (Date.now()),
        ...botData,
        is_active: false,
        questions: [],
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
        stats: {
          total_applications: 0,
          completed_applications: 0,
          pending_applications: 0,
          conversion_rate: 0
        }
      }
      
      bots.value.push(newBot)
      demoBots.push(newBot)
      return newBot
    } catch (err: any) {
      error.value = '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞'
      return null
    } finally {
      loading.value = false
    }
  }

  const updateBot = async (id: string, botData: Partial<BotForm>) => {
    loading.value = true
    error.value = null

    try {
      // Simulate API delay
      await new Promise(resolve => setTimeout(resolve, 800))
      
      const index = bots.value.findIndex(bot => bot.id === id)
      if (index !== -1) {
        bots.value[index] = { ...bots.value[index], ...botData, updated_at: new Date().toISOString() }
        
        // Update in demo data
        const demoIndex = demoBots.findIndex(bot => bot.id === id)
        if (demoIndex !== -1) {
          demoBots[demoIndex] = { ...demoBots[demoIndex], ...botData, updated_at: new Date().toISOString() }
        }
        
        if (currentBot.value?.id === id) {
          currentBot.value = bots.value[index]
        }
        return bots.value[index]
      }
      return null
    } catch (err: any) {
      error.value = '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞'
      return null
    } finally {
      loading.value = false
    }
  }

  const deleteBot = async (id: string) => {
    loading.value = true
    error.value = null

    try {
      // Simulate API delay
      await new Promise(resolve => setTimeout(resolve, 600))
      
      bots.value = bots.value.filter(bot => bot.id !== id)
      
      // Remove from demo data
      const demoIndex = demoBots.findIndex(bot => bot.id === id)
      if (demoIndex !== -1) {
        demoBots.splice(demoIndex, 1)
      }
      
      if (currentBot.value?.id === id) {
        currentBot.value = null
      }
      return true
    } catch (err: any) {
      error.value = '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–æ—Ç–∞'
      return false
    } finally {
      loading.value = false
    }
  }

  const updateBotQuestions = async (botId: string, questions: Question[]) => {
    loading.value = true
    error.value = null

    try {
      // Simulate API delay
      await new Promise(resolve => setTimeout(resolve, 700))
      
      const bot = bots.value.find(b => b.id === botId)
      if (bot) {
        bot.questions = [...questions]
        bot.updated_at = new Date().toISOString()
        
        // Update in demo data
        const demoBot = demoBots.find(b => b.id === botId)
        if (demoBot) {
          demoBot.questions = [...questions]
          demoBot.updated_at = new Date().toISOString()
        }
        
        if (currentBot.value?.id === botId) {
          currentBot.value.questions = [...questions]
        }
      }
      return true
    } catch (err: any) {
      error.value = '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤'
      return false
    } finally {
      loading.value = false
    }
  }

  const toggleBotStatus = async (id: string) => {
    loading.value = true
    error.value = null

    try {
      // Simulate API delay
      await new Promise(resolve => setTimeout(resolve, 400))
      
      const bot = bots.value.find(b => b.id === id)
      if (bot) {
        bot.is_active = !bot.is_active
        bot.updated_at = new Date().toISOString()
        
        // Update in demo data
        const demoBot = demoBots.find(b => b.id === id)
        if (demoBot) {
          demoBot.is_active = bot.is_active
          demoBot.updated_at = bot.updated_at
        }
        
        if (currentBot.value?.id === id) {
          currentBot.value.is_active = bot.is_active
        }
        
        return bot
      }
      return null
    } catch (err: any) {
      error.value = '–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞'
      return null
    } finally {
      loading.value = false
    }
  }

  return {
    bots,
    currentBot,
    loading,
    error,
    fetchBots,
    fetchBot,
    createBot,
    updateBot,
    deleteBot,
    updateBotQuestions,
    toggleBotStatus
  }
})